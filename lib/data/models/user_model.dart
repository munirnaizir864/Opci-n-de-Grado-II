import '../../domain/entities/user_entity.dart';

class UserModel extends UserEntity {
  UserModel({
    int id,
    String carneNumber,
    String name,
    String surname,
    String email,
    int documentType,
    String documentNumber,
    String dateOfBirth,
    int civilStatus,
    int gender,
    String address,
    String department,
    String city,
    String homePhone,
    String cellPhone,
    int entailmentType,
    String dateOfEntry,
    int studyRank,
    String profession,
    int position,
    int nativeLanguage,
    int secondLanguage,
    int hasLicense,
    int hasCertificate,
    int isInsured,
    String driveLicenseType,
    String driveLicenseNumber,
    String passportNumber,
    String passportExpirationDate,
    int hasVisa,
    String eps,
    int regime,
    String bloodType,
    String height,
    String weight,
    int hasGlasses,
    String emergencyContactName,
    String emergencyContactNumber,
    String emergencyContactAddress,
    int voluntaryGroupId,
    int carnetizado,
    int status,
  }) : super(
          id: id,
          carneNumber: carneNumber,
          name: name,
          surname: surname,
          email: email,
          documentType: documentType,
          documentNumber: documentNumber,
          dateOfBirth: dateOfBirth,
          civilStatus: civilStatus,
          gender: gender,
          address: address,
          department: department,
          city: city,
          homePhone: homePhone,
          cellPhone: cellPhone,
          entailmentType: entailmentType,
          dateOfEntry: dateOfEntry,
          studyRank: studyRank,
          profession: profession,
          position: position,
          nativeLanguage: nativeLanguage,
          secondLanguage: secondLanguage,
          hasLicense: hasLicense,
          hasCertificate: hasCertificate,
          isInsured: isInsured,
          driveLicenseType: driveLicenseType,
          driveLicenseNumber: driveLicenseNumber,
          passportNumber: passportNumber,
          passportExpirationDate: passportExpirationDate,
          hasVisa: hasVisa,
          eps: eps,
          regime: regime,
          bloodType: bloodType,
          height: height,
          weight: weight,
          hasGlasses: hasGlasses,
          emergencyContactName: emergencyContactName,
          emergencyContactNumber: emergencyContactNumber,
          emergencyContactAddress: emergencyContactAddress,
          voluntaryGroupId: voluntaryGroupId,
          carnetizado: carnetizado,
          status: status,
        );

  factory UserModel.fromJson(Map<String, dynamic> json) => UserModel(
        id: json["id_usuarios"],
        carneNumber: json["no_carne"],
        name: json["nombre"],
        surname: json["apellidos"],
        email: json["email"],
        documentType: json["id_tipo_documento"] == null
            ? null
            : json['id_tipo_documento'],
        documentNumber: json["no_documento"],
        dateOfBirth: json["fecha_nacimiento"],
        civilStatus:
            json["id_estado_civil"] == null ? null : json["id_estado_civil"],
        gender: json["id_genero"],
        address: json["direccion_domicilio"],
        department: json["departamento"],
        city: json["municipio"],
        homePhone: json["tel_domicilio"],
        cellPhone: json["cel"],
        entailmentType: json["id_tipo_vinculacion"],
        dateOfEntry: json["fecha_ingreso"],
        studyRank:
            json["id_rango_estudio"] == null ? null : json['id_rango_estudio'],
        profession: json["profesion"],
        position: json["id_cargo"] == null ? null : json["id_cargo"],
        nativeLanguage: json["id_idioma"],
        secondLanguage: json["id_idioma2"],
        hasLicense: json["licencia"],
        hasCertificate: json["certificado"],
        isInsured: json["asegurado"],
        driveLicenseType: json["tipo_licencia_conduccion"],
        driveLicenseNumber: json["no_licencia_conduccion"],
        passportNumber: json["no_pasaporte"],
        passportExpirationDate: json["fecha_vencimiento_pasaporte"],
        hasVisa: json["visa"],
        eps: json["nombre_eps"],
        regime: json["tipo_afiliacion"],
        bloodType: json["tipo_sangre"],
        height: json["estatura"],
        weight: json["peso"],
        hasGlasses: json["gafas"],
        emergencyContactName: json["nombre_contacto_emergencia"],
        emergencyContactNumber: json["tel_contacto_emergencia"],
        emergencyContactAddress: json["direccion_contacto_emergencia"],
        voluntaryGroupId: json["id_grupo_voluntario"],
        carnetizado: json["carnetizado"],
        status: json["status"],
      );

  Map<String, dynamic> toFirestoreJson() {
    Map json = toJson();
    json.removeWhere((key, value) => value == null);
    return json;
  }

  Map<String, dynamic> toJson() => {
        "id_usuarios": id,
        "no_carne": carneNumber,
        "nombre": name,
        "apellidos": surname,
        "email": email,
        "id_tipo_documento": documentType,
        "no_documento": documentNumber,
        "fecha_nacimiento": dateOfBirth,
        "id_estado_civil": civilStatus,
        "id_genero": gender,
        "direccion_domicilio": address,
        "departamento": department,
        "municipio": city,
        "tel_domicilio": homePhone,
        "cel": cellPhone,
        "id_tipo_vinculacion": entailmentType,
        "fecha_ingreso": dateOfEntry,
        "id_rango_estudio": studyRank,
        "profesion": profession,
        "id_cargo": position,
        "id_idioma": nativeLanguage,
        "id_idioma2": secondLanguage,
        "licencia": hasLicense,
        "asegurado": isInsured,
        "certificado": hasCertificate,
        "tipo_licencia_conduccion": driveLicenseType,
        "no_licencia_conduccion": driveLicenseNumber,
        "no_pasaporte": passportNumber,
        "fecha_vencimiento_pasaporte": passportExpirationDate,
        "visa": hasVisa,
        "nombre_eps": eps,
        "tipo_afiliacion": regime,
        "tipo_sangre": bloodType,
        "estatura": height,
        "peso": weight,
        "gafas": hasGlasses,
        "nombre_contacto_emergencia": emergencyContactName,
        "tel_contacto_emergencia": emergencyContactNumber,
        "direccion_contacto_emergencia": emergencyContactAddress,
        "id_grupo_voluntario": voluntaryGroupId,
        "carnetizado": carnetizado,
        "status": status,
      };
}
